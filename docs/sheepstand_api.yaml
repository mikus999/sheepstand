openapi: 3.0.2
info:
  title: SheepStand
  description: 'Internal API for SheepStand.com'
  version: '1.0.0'
servers:
  - url: https://sheepstand.com/api
  - url: https://dev.sheepstand.com/api
paths:
  /logout:
    post:
      tags:
        - auth 
      responses:
        200:
          description: OK
  /login:
    post:
      tags:
        - auth
        - public
      security: []
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          token:
                            type: string
                          token_type:
                            type: string
                            example: Bearer
                          expires_in:
                            type: integer
        401:
          $ref: '#/components/responses/AuthenticationFailed'
  /register:
    post:
      tags:
        - auth
        - public
      security: []
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: password_confirmation
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/AuthenticationFailed'

  /user:
    get:
      summary: Get currently authenticated user
      tags: 
        - user
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            allOf:
                            - $ref: '#/components/schemas/User'
                            - properties:
                                roles:
                                  $ref: '#/components/schemas/CombinedRoles'
                                marriage_mate:
                                  $ref: '#/components/schemas/User'
                                user_availabilities:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/UserAvailability'
                                user_vacations:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/UserVacation'
                                teams:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/Team'
        401:
          $ref: '#/components/responses/Unauthorized'
  /user/{id}/roles:
    get:
      summary: Returns user's current roles
      tags:
        - security
        - user
      description: |
        __Roles__
        ___
        * everyone
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          roles:
                            $ref: '#/components/schemas/CombinedRoles'
    post:
      summary: Sets user's current roles
      tags:
        - security
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - name: role
          in: query
          required: true
          schema:
            type: string
            example: publisher
        - name: changetype
          in: query
          required: true
          schema:
            type: string
            description: add, remove, sync
        - name: team_id
          in: query
          schema:
            type: integer
            description: null for global roles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          roles:
                            $ref: '#/components/schemas/CombinedRoles'
        404:
          $ref: '#/components/responses/NotFound'
  /users:
    get:
      summary: Show all users (superadmin only)
      description: |
        __Roles__
        ___
        * super_admin
      tags:
        - user
        - superadmin
      responses:
        200:           
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          users:
                            type: array
                            items:            
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    site_roles:
                                      type: array
                                      items:
                                        type: string
                                        description: List of user's global site roles
                                        example:
                                          'translator'
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                                    languages:
                                      type: array
                                      description: Allowed translation languages
                                      items:
                                        $ref: '#/components/schemas/Language'
        403:
          $ref: '#/components/responses/AccessDenied'
  /users/{role}:
    get:
      summary: Show all users with specified role type
      tags:
        - user
        - superadmin
        - security
      description: |
        __Roles__
        ___
        * super_admin
      parameters:
        - name: role
          in: path
          required: true
          description: Role name
          schema:
            type: string
      responses:
        200:           
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          users:
                            type: array
                            items:            
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    languages:
                                      type: array
                                      description: Allowed translation languages
                                      items:
                                        $ref: '#/components/schemas/Language'
        403:
          $ref: '#/components/responses/AccessDenied'
  /roles:
    get:
      summary: Returns all site roles
      tags:
        - security
      description: |
        __Roles__
        ___
        * everyone
      responses:
        200:           
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          users:
                            type: array
                            items:            
                              allOf:
                                - $ref: '#/components/schemas/Role'
                                - properties:
                                    permissions:
                                      type: array
                                      description: Attached permissions
                                      items:
                                        $ref: '#/components/schemas/Permission'

  /account/profile:
    patch:
      summary: Update profile
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            $ref: '#/components/schemas/User'
  /account/password:
    patch:
      summary: Update password
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: user
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/User'
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            $ref: '#/components/schemas/User'
  /account/availability:
    get:
      summary: Returns weekly availability for authenticated user
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          availability:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserAvailability'
    post:
      summary: Sets weekly availability
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
        * super_admin
      parameters:
        - name: user_id
          in: query
          description: Optional. Will use authenticated user.
          required: false
          schema:
            type: integer
        - name: availability
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserAvailability'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          availability:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserAvailability'
  /account/availability/default:
    post:
      summary: Reset user availability according to request (all/none)
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
        * super_admin
      parameters:
        - name: user_id
          in: query
          description: Optional. Will use authenticated user.
          required: false
          schema:
            type: integer
        - name: default
          in: query
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          availability:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserAvailability'
        403:
          $ref: '#/components/responses/AccessDenied'
  /account/vacation:
    get:
      summary: Returns vacation schedule for authenticated user
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          vacation:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserVacation'
    post:
      summary: Adds vacation period
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: date_start
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: date_end
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: note
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          vacation:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserVacation'
  /account/vacation/{id}:
    delete:
      summary: Deletes vacation period
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          vacation:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserVacation'
        404:
          $ref: '#/components/responses/NotFound'
  /account/fts:
    post:
      summary: Changes FTS status
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
        * team_admin
        * super_admin
      parameters:
        - name: user_id
          in: query
          required: false
          description: Optional. Will use authenticated user.
          schema:
            type: integer
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /account/marriage:
    post:
      summary: Changes marriage mate
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
        * team_admin
        * super_admin
      parameters:
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
        - name: mate1_id
          in: query
          required: true
          schema:
            type: integer
        - name: mate2_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /account/driver:
    post:
      summary: Changes driver status
      tags:
        - user
        - profile
      description: |
        __Roles__
        ___
        * self
        * team_admin
        * super_admin
      parameters:
        - name: user_id
          in: query
          required: false
          description: Optional. Will use authenticated user.
          schema:
            type: integer
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          user:
                            $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'

  /teams:
    get:
      summary: Get user's teams
      tags:
        - team
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          teams:
                            type: array
                            items:
                              $ref: '#/components/schemas/Team'
    post:
      summary: Create new team
      tags:
        - team
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: display_name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
        400:
          $ref: '#/components/responses/BadRequest'
  /teams/{id}:
    get:
      summary: Display a team
      tags:
        - team
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a team
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a team
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object   
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'



  /teams/jointeam:
    post:
      summary: Join an existing team
      tags:
        - team
      description: |
        __Roles__
        ___
        * self
        * team_admin
        * super_admin
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
        - name: user_code
          in: query
          required: false
          schema:
            type: string
        - name: team_id
          in: query
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
                          teams:
                            type: array
                            items:
                              $ref: '#/components/schemas/Team'
                          user:
                            $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/leaveteam:
    post:
      summary: Remove user from team
      tags:
        - team
      description: |
        __Roles__
        ___
        * self
        * team_admin
        * super_admin
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          teams:
                            type: array
                            items:
                              $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/{id}/resetcode:
    get:
      summary: Change a team's unique code
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
        * super_admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/{code}/findteam:
    get:
      summary: Find a team by code
      tags:
        - team
      description: |
        __Roles__
        ___
        * everyone
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
                          user:
                            $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
  /teams/{id}/users:
    get:
      summary: Return all team members
      tags:
        - team
      description: |
        __Roles__
        ___
        * everyone
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          users:
                            type: array
                            items:            
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    team_role:
                                      type: string
                                      example: 'publisher'
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                                    shifts:
                                      type: array
                                      description: All user's shifts
                                      items:
                                        $ref: '#/components/schemas/Shift'
        404:
          $ref: '#/components/responses/NotFound'
  /teams/settings/update:
    post:
      summary: Update a team setting
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
        * super_admin
      parameters:
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
        - name: setting
          in: query
          required: true
          schema:
            type: string
        - name: value
          in: query
          required: true
          schema:
            oneOf:
              - type: integer
              - type: string
              - type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          team:
                            $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/default/update:
    post:
      summary: Set the user's default team
      tags:
        - team
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          affected_rows:
                            type: integer
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/{id}/notificationsettings:
    get:
      summary: Returns team notification settings
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
        * super_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Team ID
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          team:
                            $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
    post:
      summary: Updates team notification settings
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
        * super_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Team ID
          schema:
            type: integer
        - name: reset 
          in: query
          required: false
          schema:
            type: boolean
        - name: channel_id
          in: query
          required: false
          schema:
            type: string
        - name: access_hash
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          team:
                            $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/{id}/grouplink:
    get:
      summary: Gets team Telegram group link
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
        * super_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Team ID
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          channel_id:
                            type: string
                          link:
                            type: string                            
        404:
          $ref: '#/components/responses/NotFound'
    post:
      summary: Updates team Telegram group link
      tags:
        - team
      description: |
        __Roles__
        ___
        * team_admin
        * super_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Team ID
          schema:
            type: integer
        - name: group_link
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          team:
                            $ref: '#/components/schemas/Team'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/{id}/availability:
    get:
      summary: Gets availability for all team members
      tags:
        - team
      description: |
        __Roles__
        ___
        * elder
        * team_admin
        * super_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Team ID
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          users:
                            type: array
                            items:            
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    user_availabilities:
                                      type: array
                                      items:
                                        $ref: '#/components/schemas/UserAvailability'
                                    user_vacations:
                                      type: array
                                      items:
                                        $ref: '#/components/schemas/UserVacation'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /teams/{id}/stats:
    get:
      summary: Get scheduling statistics for a team
      tags:
        - scheduling
        - team
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:  
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          stats:
                            type: object
                            properties:                        
                              total_spots:
                                type: integer
                              available_spots:
                                type: integer
                              total_shifts:
                                type: integer
                              shifts_with_needs:
                                type: integer
                              shifts_with_trades:
                                type: integer
        403:
          $ref: '#/components/responses/AccessDenied'



  /teams/{team_id}/locations:
    get:
      summary: Display all locations for a team
      tags:
        - team
        - location
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          locations:
                            type: array
                            items:
                              $ref: '#/components/schemas/Location'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a new location
      tags:
        - team
        - location
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: color_code
          in: query
          required: true
          schema:
            type: string
        - name: map
          in: query
          required: true
          schema:
            type: string
        - name: default
          in: query
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          location:
                            $ref: '#/components/schemas/Location'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /teams/{team_id}/locations/{location_id}:
    get:
      summary: Display a location
      tags:
        - team
        - location
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: integer
        - name: location_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          location:
                            $ref: '#/components/schemas/Location'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a location
      tags:
        - team
        - location
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: integer
        - name: location_id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: color_code
          in: query
          required: true
          schema:
            type: string
        - name: map
          in: query
          required: true
          schema:
            type: string
        - name: default
          in: query
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          location:
                            $ref: '#/components/schemas/Location'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a location
      tags:
        - team
        - location
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: integer
        - name: location_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /teams/{teamid}/locations/{locid}/makedefault:
    post:
      summary: Change default location for team
      tags:
        - team
        - location
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: teamid
          in: path
          required: true
          schema:
            type: integer
        - name: locid
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:  
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          location:
                            $ref: '#/components/schemas/Location'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'

  /schedules/{schedule_id}/shifts:
    get:
      summary: Display all shifts for a schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shifts:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a new shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: integer
        - name: location_id
          in: query
          required: true
          schema:
            type: integer         
        - name: time_start
          in: query
          required: true
          schema:
            type: string   
            format: date-time   
        - name: time_end
          in: query
          required: true
          schema:
            type: string 
            format: date-time    
        - name: min_participants
          in: query
          required: true
          schema:
            type: integer      
        - name: max_participants
          in: query
          required: true
          schema:
            type: integer      
        - name: mandatory
          in: query
          required: true
          schema:
            type: boolean   
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shift:
                            $ref: '#/components/schemas/Shift'
                          schedule:
                            allOf:
                              - $ref: '#/components/schemas/Schedule'
                              - properties:
                                  shifts:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Shift'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/{schedule_id}/shifts/{shift_id}:
    get:
      summary: Display a shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: integer
        - name: shift_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shift:
                            $ref: '#/components/schemas/Shift'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update a shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: integer
        - name: shift_id
          in: path
          required: true
          schema:
            type: integer
        - name: location_id
          in: query
          required: true
          schema:
            type: integer         
        - name: time_start
          in: query
          required: true
          schema:
            type: string   
            format: date-time   
        - name: time_end
          in: query
          required: true
          schema:
            type: string 
            format: date-time    
        - name: min_participants
          in: query
          required: true
          schema:
            type: integer      
        - name: max_participants
          in: query
          required: true
          schema:
            type: integer      
        - name: mandatory
          in: query
          required: true
          schema:
            type: boolean    
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shift:
                            $ref: '#/components/schemas/Shift'
                          schedule:
                            allOf:
                              - $ref: '#/components/schemas/Schedule'
                              - properties:
                                  shifts:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Shift'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: integer
        - name: shift_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          schedule:
                            allOf:
                              - $ref: '#/components/schemas/Schedule'
                              - properties:
                                  shifts:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Shift'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'

  /schedules/joinshift:
    post:
      summary: Add user to shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * self
        * team_admin
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
        - name: shift_id
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shiftusers:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                          usershifts:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                          trades:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    trades:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                          teamusers:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                                    shifts:
                                      type: array
                                      description: All user's shifts
                                      items:
                                        $ref: '#/components/schemas/Shift'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /schedules/leaveshift:
    post:
      summary: Remove user to shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * self
        * team_admin
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
        - name: shift_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shiftusers:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                          usershifts:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                          trades:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    trades:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                          teamusers:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                                    shifts:
                                      type: array
                                      description: All user's shifts
                                      items:
                                        $ref: '#/components/schemas/Shift'

        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /schedules/shiftuserstatus:
    post:
      summary: Change user's shift status
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * self
        * team_admin
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
        - name: shift_id
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: false
          schema:
            type: integer
        - name: trade_user_id
          in: query
          required: false
          schema:
            type: integer
        - name: trade_shift_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          shiftusers:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
                          usershifts:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                          trades:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    trades:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /schedules/{id}/approveall/{status}:
    get:
      summary: Mass change shift status
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Schedule ID
          schema:
            type: integer
        - name: status
          in: path
          required: true
          description: Status to change to approved
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          schedule:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Schedule'
                                - properties:
                                    shifts:
                                      type: array
                                      items:
                                        $ref: '#/components/schemas/Shift'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /schedules/shifts/{id}/users:
    get:
      summary: Get all users assigned to a shift
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          users:
                            type: array
                            items:            
                              allOf:
                                - $ref: '#/components/schemas/User'
                                - properties:
                                    marriage_mate:
                                      $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /schedules/trades:
    get:
      summary: Get trades for all user's shifts
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          trades:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    trades:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
    post:
      summary: Make a trade
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: user_id
          in: query
          required: true
          description: User to trade with
          schema:
            type: integer
        - name: shift_id
          in: query
          required: true
          schema:
            type: integer
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          trades:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    trades:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
                          usershifts:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /user/shifts:
    get:
      summary: Get all user's shifts
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          shifts:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/Shift'
                                - properties:
                                    users:
                                      type: array
                                      items:
                                        allOf:
                                          - $ref: '#/components/schemas/User'
                                          - properties:
                                              marriage_mate:
                                                $ref: '#/components/schemas/User'
    post:
      summary: Get a user's shifts
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: user_id
          in: query
          required: true
          description: User to trade with
          schema:
            type: integer
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          shifts:
                            type: array
                            items:
                              $ref: '#/components/schemas/Shift'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/AccessDenied'
  /schedule/{teamid}:
    get:
      summary: Get a schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/Schedule'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/show/{id}:
    get:
      summary: Get a schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_member
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedule:
                            allOf:
                              - $ref: '#/components/schemas/Schedule'
                              - properties:
                                  shifts:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Shift'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules:
    post:
      summary: Create new schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          schedule:
                            $ref: '#/components/schemas/Schedule'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/{id}:
    patch:
      summary: Update a schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            type: integer
        - name: date_start
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties:
                          schedule:
                            $ref: '#/components/schemas/Schedule'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/{id}/status:
    post:
      summary: Change schedule status
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedule:
                            allOf:
                              - $ref: '#/components/schemas/Schedule'
                              - properties:
                                  shifts:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Shift'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/templates/{teamid}:
    get:
      summary: Get team's schedule templates
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: teamid
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/Schedule'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/templates:
    post:
      summary: Create a new schedule template
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: team_id
          in: query
          required: true
          schema:
            type: integer
        - name: template_name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedule:
                            $ref: '#/components/schemas/Schedule'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/templates/{id}/copy:
    post:
      summary: Create a new schedule from a template
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Template (schedule) ID
          schema:
            type: integer
        - name: date_start
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedule:
                            $ref: '#/components/schemas/Schedule'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /schedules/{id}/templates/make:
    post:
      summary: Create a template from a schedule
      tags:
        - scheduling
      description: |
        __Roles__
        ___
        * team_admin
      parameters:
        - name: id
          in: path
          required: true
          description: Schedule ID
          schema:
            type: integer
        - name: template_name
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          schedule:
                            $ref: '#/components/schemas/Schedule'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'

  /translation/update:
    post:
      summary: Update translation string(s)
      tags:
        - translation
      description: |
        __Roles__
        ___
        * translator
        * super_admin
      parameters:
        - name: section
          in: query
          required: false
          description: Top level of json array
          schema:
            type: string
        - name: key
          in: query
          required: false
          description: Nested translation key
          schema:
            type: string
        - name: string
          in: query
          required: false
          description: Translated string
          schema:
            type: string
        - name: strings
          in: query
          required: false
          description: Multiple translated strings 
          schema:
            type: string
            format: array
        - name: lang
          in: query
          required: true
          description: Target translation language
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          strings:
                            type: array
                            items:
                              $ref: '#/components/schemas/Translation'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/AccessDenied'
  /translation/strings/{lang}:
    get:
      summary: Get translated strings
      tags:
        - translation
      description: |
        __Roles__
        ___
        * everyone
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          strings:
                            type: array
                            items:
                              $ref: '#/components/schemas/Translation'
  /translation/permissions:
    get:
      summary: Get a translator's assigned languages
      tags:
        - translation
      description: |
        __Roles__
        ___
        * translator
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          languages:
                            type: array
                            items:
                              $ref: '#/components/schemas/Language'
        403:
          $ref: '#/components/responses/AccessDenied'
    post:
      summary: Update a translator's assigned languages
      tags:
        - translation
      description: |
        __Roles__
        ___
        * super_admin
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
        - name: languages
          in: query
          required: true
          schema:
            type: string
            format: array
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          languages:
                            type: array
                            items:
                              $ref: '#/components/schemas/Language'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /translation/languages/edit:
    post:
      summary: Update site languages
      tags:
        - translation
      description: |
        __Roles__
        ___
        * super_admin
      parameters:
        - name: language
          in: query
          required: true
          schema:
            type: string
        - name: changetype
          in: query
          required: true
          description: add, remove
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          languages:
                            type: array
                            items:
                              $ref: '#/components/schemas/Language'
        403:
          $ref: '#/components/responses/AccessDenied'
        404:
          $ref: '#/components/responses/NotFound'   

  /messages:
    get:
      summary: Get all messages for user
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          received:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
                          sent:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
    post:
      summary: Create new message
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: sender_id
          in: query
          required: true
          schema:
            type: integer
        - name: sender_type
          in: query
          required: true
          schema:
            type: string
        - name: recipient_id
          in: query
          required: true
          schema:
            type: integer
        - name: recipient_type
          in: query
          required: true
          schema:
            type: string
        - name: message_subject
          in: query
          required: true
          schema:
            type: string
        - name: message_body
          in: query
          required: true
          schema:
            type: string
        - name: named_route
          in: query
          required: true
          schema:
            type: string
        - name: color
          in: query
          required: true
          schema:
            type: string
        - name: icon
          in: query
          required: true
          schema:
            type: string
        - name: show_banner
          in: query
          required: true
          schema:
            type: boolean
        - name: expires_on
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          received:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
                          sent:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
        403:
          $ref: '#/components/responses/AccessDenied'
  /messages/{id}:
    delete:
      summary: Delete a message
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          received:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
                          sent:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
        404:
          $ref: '#/components/responses/NotFound'  
        403:
          $ref: '#/components/responses/AccessDenied'
  /messages/{id}/markread:
    get:
      summary: Mark message as read
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          received:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
                          sent:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
        404:
          $ref: '#/components/responses/NotFound'   
  /messages/{id}/markunread:
    get:
      summary: Mark message as unread
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          received:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
                          sent:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
        404:
          $ref: '#/components/responses/NotFound'   
  /messages/{id}/hide:
    get:
      summary: Mark message as hidden
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          received:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
                          sent:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
        404:
          $ref: '#/components/responses/NotFound'   
  /messages/count:
    get:
      summary: Get message count
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          unread:
                            type: integer
                          total:
                            type: integer
  /messages/banners:
    get:
      summary: Get banners
      tags:
        - message
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          banners:
                            type: array
                            items:
                              $ref: '#/components/schemas/Message'
  /tasks/scheduled:
    get:
      summary: Run scheduled tasks
      tags:
        - tasks
      description: |
        __Roles__
        ___
        * self
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ResponseSuccess'
                  - properties:
                      data:
                        type: object    
                        properties: # List all returned objects/data here
                          message_count:
                            type: integer




components:
  responses:
    BadRequest:
      description: 404 Bad request (something wrong with URL or parameters)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    Unauthorized:
      description: 401 Unauthenticated (not logged in)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    AuthenticationFailed:
      description: 401.1 Authentication Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    AccessDenied:
      description: 403 Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    NotFound:
      description: 404 The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    ValidationFailed:
      description: 422 Validation failed (something wrong with parameters)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    ServerError:
      description: 500 General server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
  schemas:
    NotificationSettings:
      type: object
      properties:
        id:
          type: integer
          format: int64  
        team_id:
          type: integer
          format: int64
        telegram_channel_id:
          type: string
        telegram_access_hash:
          type: string
        telegram_group_link:
          type: string
        setting_notify_trade_requests:
          type: boolean
        setting_notify_trade_filled:
          type: boolean
        setting_notify_schedule_open:
          type: boolean
        setting_notify_schedule_closed:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CombinedRoles:
      type: object
      properties:
        TEAMID:
          type: array
          items:
            type: string
          example: ['publisher']
          description: Each user team has team id as key and contains the user's role as string
        global:
          type: array
          items:
            type: string
          example: ['translator']
    Language:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          example: 'sr'
        name:
          type: string
          example: "Serbian"
        native_name:
          type: string
          example: "srpski"
        site_language:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        team_id:
          type: integer
          format: int64
        name:
          type: string
        color_code:
          type: string
        map:
          type: string
        default: 
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sender_id:
          type: integer
          format: int64
        sender_type:
          type: string
        recipient_id:
          type: integer
          format: int64
        recipient_type:
          type: string        
        message_subject:
          type: string
        message_body:
          type: string
        named_route: 
          type: string
        color:
          type: string
        icon:
          type: string
        show_banner: 
          type: boolean
        expires_on:
          type: string
          format: date-time
        is_read:
          type: integer
        is_hidden:
          type: integer
        sender:
          oneOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Team'
            - nullable: true
        recipient:
          oneOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Team'  
            - nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Permission:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'view_shifts'
        display_name:
          type: string
          example: 'View and apply for shifts'
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'publisher'
        display_name:
          type: string
          example: 'Publisher'
        description:
          type: string
        global:
          type: boolean
          description: true = global, false = team
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Schedule:
      type: object
      properties:
        id:
          type: integer
          format: int64
        team_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        status:
          type: integer
        date_start:
          type: string
          format: date-time
        template_name:
          type: string
        shifts_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        team:
          $ref: '#/components/schemas/Team'
    Shift:
      type: object
      properties:
        id:
          type: integer
          format: int64
        schedule_id:
          type: integer
          format: int64
        location_id:
          type: integer
          format: int64
        time_start:
          type: string
          format: date-time
        time_end:
          type: string
          format: date-time
        min_participants:
          type: integer
        max_participants:
          type: integer
        mandatory:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        schedule:
          $ref: '#/components/schemas/Schedule'
        location:
          $ref: '#/components/schemas/Location'
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: '000000000000'
          description: Random number used for roles
        display_name:
          type: string
          example: 'Team Name'
        description:
          type: string
        code:
          type: string
        user_id:
          type: integer
          format: int64
          description: Team Owner
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        setting_shift_request_autoapproval:
          type: boolean
        setting_shift_assignment_autoaccept:
          type: boolean
        default_participants_min:
          type: integer
        default_participants_max:
          type: integer
        default_shift_minutes:
          type: integer
        setting_shift_trade_autoapproval: 
          type: boolean
        language:
          type: string
          example: 'en'
          description: ISO 639-1 (2-digit)
        notificationsettings:
          $ref: '#/components/schemas/NotificationSettings'
    TeamUser:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        team_id:
          type: integer
          format: int64
        default_team:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Translation:
      type: object
      properties:
        SECTION:
          type: object
          properties:
            KEY:
              type: string
              example: 'translated string'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        email_verified_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time      
        updated_at:
          type: string
          format: date-time
        gdpr_consent:
          type: string
          format: date-time
        user_code:
          type: string
        fts_status:
          type: integer
        driver:
          type: boolean
        mate_id:
          type: integer
        photo_url:
          type: string
    UserAvailability:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        day_of_week:
          type: integer
          format: int64
        start_time:
          type: string
          description: HH:MM:SS
        end_time:
          type: string
          description: HH:MM:SS
        available:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserVacation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        date_start:
          type: string
          format: date
        date_end:
          type: string
          format: date
        note:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ResponseError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
        locale:
          type: string
        message:
          type: string
        data:
          type: object
    ResponseSuccess:
      type: object
      properties:
        success:
          type: boolean
          example: true
        code:
          type: integer
        locale:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://sheepstand.com/oauth
          scopes:
            full: Full API access
security:
  - bearerAuth: []
  - oauth: []